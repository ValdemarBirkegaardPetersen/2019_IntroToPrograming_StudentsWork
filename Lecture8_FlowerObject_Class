class Flower {
  
 // Variables
 
 float r;       // radius of the flower petal
 int n_petals;  // number of petals 
 float x;       // x-position of the center of the flower
 float y;       // y-position of the center of the flower
 int petalColor;//hexadecimal number for the color of petals
 float velocity;
 float velocity2;
 
//3 normals moving flowers
Flower(float temp_r, int temp_n_petals, float temp_x, float temp_y, int temp_petalColor,float temp_velocity,float temp_velocity2) {
  r=temp_r;
  n_petals = temp_n_petals;
  x=temp_x;
  y=temp_y;
  petalColor=temp_petalColor;
  velocity = temp_velocity;
  velocity2 = temp_velocity2;
}

//mouse flower 
Flower(float temp_r,int temp_n_petals,float temp_x,float temp_y,int temp_petalColor) {
 r = temp_r;
 n_petals = temp_n_petals;
 x = temp_x;
 y = temp_y;
 petalColor = temp_petalColor;
  
  
}

void display () {
  
  float ballX;
  float ballY;
  
  fill(petalColor);
  for (float i=0;i<PI*2;i+=2*PI/n_petals) {
//  ballX=width/2 + r*cos(i);
//  ballY=height/2 + r*sin(i);
  ballX = x + r*cos(i);
  ballY = y + r*sin(i);
  ellipse(ballX,ballY,r,r); 
  }
  fill(200,0,0);
  ellipse(x,y,r*1.2,r*1.2);
}

void move () {
  x = x + velocity;
  y = y + velocity2;
}
void bounce () {
 if (x > width - r || x < r){
  velocity = velocity * (-1);
 }
 if (y > height -r || y < 0) {
  velocity2 = velocity2 *(-1);
 }
}

void mouse () {
 x = mouseX;
 y = mouseY;
  
}

boolean overLAP (Flower other) {
  float d = dist (x,y, other.x,other.y);
  if (d < r + other.r) {
    ps.addParticle();
  ps.run();
    return true;
  }
  else {
    return false; 
  }
    
    
  }
   boolean overLAPMouse(Flower other) {
    float d = dist(mouseX, mouseY, other.x, other.y); 
    if (d < r + other.r) {  
      ps.addParticle();
      ps.run();
      return true;  
    }
    else { 
      return false;
    }
  }
  
}
